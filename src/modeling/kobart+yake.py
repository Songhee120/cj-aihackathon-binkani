# -*- coding: utf-8 -*-
"""kobart+YAKE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AUvhC3GaS1dQySUPQYXG1IgLL99vO7o_

#kobart로 요약문 생성, YAKE로 키워드 추출

## KoBART-summarization  
- https://github.com/seujung/KoBART-summarization
"""

!pip install transformers torch

import torch
from transformers import PreTrainedTokenizerFast
from transformers import BartForConditionalGeneration

tokenizer = PreTrainedTokenizerFast.from_pretrained('digit82/kobart-summarization')
model = BartForConditionalGeneration.from_pretrained('digit82/kobart-summarization')

text = "동백나무가 자생하는 남해안에는 동백섬이란 이름을 가진 섬들이 많다. 현재 부산 해운대구의 해안대도 일반 명칭은 동백섬으로 섬 전체를 붉게 물들이는 동백나무가 섬의 이름이 되었다. 해운대는 원래 섬이었으나, 육지에 가까이 있어 흐르는 물에 흙, 모래, 자갈 등이 내려와 쌓이면서 육지와 연결된 육계도이다. 군사보호지역이므로 해안의 모든 절경을 다 볼 수는 없지만, 인어상이 있는 해운대 바닷가쪽 암반과 절경만으로도 가히 천하제일이라 할 수 있다. 현재 동백섬 주위에는 동백나무와 소나무가 울창하고, 섬의 중앙에는 최치원의 동상과 기념비가 서 있다. 해운대 동백섬은 최치원의 발자취가 남아 있는 유적지이며, 예로부터 그 경관이 매우 뛰어나 유명한 시인묵객들이 즐겨 찾던 곳이기도 하였다. 해송의 울창함과 바다구름의 어우러짐은 찾는 이들에게 안식을 주기에 충분하다."

raw_input_ids = tokenizer.encode(text)
input_ids = [tokenizer.bos_token_id] + raw_input_ids + [tokenizer.eos_token_id]

summary_ids = model.generate(torch.tensor([input_ids]),  num_beams=4,  max_length=512,  eos_token_id=1)
sum_text = tokenizer.decode(summary_ids.squeeze().tolist(), skip_special_tokens=True)

""" ## hyunwoongko/kobart, gogamza/kobart-base-v2"""

!pip install transformers
!pip install torch

from transformers import BartForConditionalGeneration, PreTrainedTokenizerFast, BartModel
from transformers import BartTokenizer, BartForConditionalGeneration

# KoBART 모델 및 토크나이저 로드
model_name = "hyunwoongko/kobart"
model_name = "gogamza/kobart-base-v2"
tokenizer = PreTrainedTokenizerFast.from_pretrained(model_name)
model = BartForConditionalGeneration.from_pretrained(model_name)

# 원본 텍스트
text = """
KoBART는 한국어 텍스트에 대한 요약에 사용될 수 있는 강력한 BART(Bidirectional and Auto-Regressive Transformers) 모델입니다.
요약하는 예제 코드입니다.
"""

# 텍스트 요약
inputs = tokenizer.encode("요약: " + text, return_tensors="pt", max_length=1024, truncation=True)
summary_ids = model.generate(inputs, max_length=150, min_length=50, length_penalty=2.0, num_beams=4, early_stopping=True)
summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)

print("요약문:")
print(summary)

"""## ainize/kobart-news"""

from transformers import PreTrainedTokenizerFast, BartForConditionalGeneration
#  Load Model and Tokenize
tokenizer = PreTrainedTokenizerFast.from_pretrained("ainize/kobart-news")
model = BartForConditionalGeneration.from_pretrained("ainize/kobart-news")
# Encode Input Text
input_text = '국내 전반적인 경기침체로 상가 건물주의 수익도 전국적인 감소세를 보이고 있는 것으로 나타났다. 수익형 부동산 연구개발기업 상가정보연구소는 한국감정원 통계를 분석한 결과 전국 중대형 상가 순영업소득(부동산에서 발생하는 임대수입, 기타수입에서 제반 경비를 공제한 순소득)이 1분기 ㎡당 3만4200원에서 3분기 2만5800원으로 감소했다고 17일 밝혔다. 수도권, 세종시, 지방광역시에서 순영업소득이 가장 많이 감소한 지역은 3분기 1만3100원을 기록한 울산으로, 1분기 1만9100원 대비 31.4% 감소했다. 이어 대구(-27.7%), 서울(-26.9%), 광주(-24.9%), 부산(-23.5%), 세종(-23.4%), 대전(-21%), 경기(-19.2%), 인천(-18.5%) 순으로 감소했다. 지방 도시의 경우도 비슷했다. 경남의 3분기 순영업소득은 1만2800원으로 1분기 1만7400원 대비 26.4% 감소했으며 제주(-25.1%), 경북(-24.1%), 충남(-20.9%), 강원(-20.9%), 전남(-20.1%), 전북(-17%), 충북(-15.3%) 등도 감소세를 보였다. 조현택 상가정보연구소 연구원은 "올해 내수 경기의 침체된 분위기가 유지되며 상가, 오피스 등을 비롯한 수익형 부동산 시장의 분위기도 경직된 모습을 보였고 오피스텔, 지식산업센터 등의 수익형 부동산 공급도 증가해 공실의 위험도 늘었다"며 "실제 올 3분기 전국 중대형 상가 공실률은 11.5%를 기록하며 1분기 11.3% 대비 0.2% 포인트 증가했다"고 말했다. 그는 "최근 소셜커머스(SNS를 통한 전자상거래), 음식 배달 중개 애플리케이션, 중고 물품 거래 애플리케이션 등의 사용 증가로 오프라인 매장에 영향을 미쳤다"며 "향후 지역, 콘텐츠에 따른 상권 양극화 현상은 심화될 것으로 보인다"고 덧붙였다.'
input_ids = tokenizer.encode(input_text, return_tensors="pt")
# Generate Summary Text Ids
summary_text_ids = model.generate(
    input_ids=input_ids,
    bos_token_id=model.config.bos_token_id,
    eos_token_id=model.config.eos_token_id,
    length_penalty=2.0,
    max_length=142,
    min_length=56,
    num_beams=4,
)

# Decoding Text
print(tokenizer.decode(summary_text_ids[0], skip_special_tokens=True))

""" ## YAKE로 키워드 추출"""

!pip install yake

import yake

# YAKE 객체를 생성하고 키워드 추출을 위한 옵션을 설정합니다.
kw_extractor = yake.KeywordExtractor(lan="ko", n=1, dedupLim=0.9, top=5, features=None)

# 텍스트에서 키워드를 추출합니다.
keywords = kw_extractor.extract_keywords(sum_text)

# 추출된 키워드를 출력합니다.
for score, kw in keywords:
    print("키워드:", kw, "점수:", score)

